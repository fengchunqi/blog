(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{589:function(t,a,s){"use strict";s.r(a);var e=s(6),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIPS")]),t._v(" "),s("p",[t._v("参考文章：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://blog.csdn.net/qq_38910842/article/details/104960509",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("前端缓存看这一篇就够了"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/44789005",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("一文读懂前端缓存"),s("OutboundLink")],1)])])]),t._v(" "),s("h2",{attrs:{id:"什么是缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存"}},[t._v("#")]),t._v(" 什么是缓存")]),t._v(" "),s("p",[t._v("基本的网络请求就是三个步骤："),s("strong",[t._v("请求")]),t._v("，"),s("strong",[t._v("处理")]),t._v("，"),s("strong",[t._v("响应")]),t._v("。")]),t._v(" "),s("p",[t._v("后端缓存主要集中于 "),s("strong",[t._v("处理")]),t._v(" 步骤，通过保留数据库连接，存储处理结果等方式缩短处理时间，尽快进入 "),s("strong",[t._v("响应")]),t._v(" 步骤。当然这不在本文的讨论范围之内。")]),t._v(" "),s("p",[t._v("而前端缓存则可以在剩下的两步： "),s("strong",[t._v("请求")]),t._v(" 和 "),s("strong",[t._v("响应")]),t._v(" 中进行。在 "),s("strong",[t._v("请求")]),t._v(" 步骤中，浏览器也可以通过存储结果的方式直接使用资源，直接省去了发送请求；而 "),s("strong",[t._v("响应")]),t._v(" 步骤需要浏览器和服务器共同配合，通过减少响应内容来缩短传输时间。前端缓存主要是保存资源副本并在下次请求时直接使用该副本。")]),t._v(" "),s("h2",{attrs:{id:"为什么要缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要缓存"}},[t._v("#")]),t._v(" 为什么要缓存")]),t._v(" "),s("ul",[s("li",[t._v("缓解服务器压力（不用每次去请求资源）")]),t._v(" "),s("li",[t._v("提升性能，提高访问速度（打开本地资源速度当然比请求回来再打开要快得多）")]),t._v(" "),s("li",[t._v("减少网络 IO 消耗，减少带宽消耗")]),t._v(" "),s("li",[t._v("通过网络获取内容既速度缓慢又开销巨大")]),t._v(" "),s("li",[t._v("如果是较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用")])]),t._v(" "),s("h2",{attrs:{id:"缓存分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存分类"}},[t._v("#")]),t._v(" 缓存分类")]),t._v(" "),s("p",[t._v("缓存总体可分为："),s("strong",[t._v("私有缓存（private）")]),t._v(" 与 "),s("strong",[t._v("共享缓存（public）")])]),t._v(" "),s("ul",[s("li",[t._v("私有缓存：该资源只能被浏览器缓存，private为默认值，只能用于单独用户。比如浏览器中的“缓存”选项，浏览器缓存拥有用户可以通过http下载的所有文档。")]),t._v(" "),s("li",[t._v("共享缓存：该资源既可以被浏览器缓存，也可以被代理服务器缓存，能够被多个用户使用。这样资源是可以被重复使用的，优点：减少网络拥堵和延迟。")])]),t._v(" "),s("p",[t._v("按种类分的话可以分为：")]),t._v(" "),s("ul",[s("li",[t._v("数据库缓存")]),t._v(" "),s("li",[t._v("代理服务器缓存")]),t._v(" "),s("li",[t._v("网关缓存（CDN缓存）")]),t._v(" "),s("li",[t._v("浏览器缓存")])]),t._v(" "),s("p",[t._v("这里我们主要聊一下浏览器缓存")]),t._v(" "),s("h2",{attrs:{id:"按缓存位置分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按缓存位置分类"}},[t._v("#")]),t._v(" 按缓存位置分类")]),t._v(" "),s("p",[t._v("从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络：")]),t._v(" "),s("ul",[s("li",[t._v("Service Worker")]),t._v(" "),s("li",[t._v("memory cache")]),t._v(" "),s("li",[t._v("disk cache")]),t._v(" "),s("li",[t._v("Push Cache")])]),t._v(" "),s("h3",{attrs:{id:"service-worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[t._v("#")]),t._v(" Service Worker")]),t._v(" "),s("p",[s("code",[t._v("Service Worker")]),t._v(" 是一种独立于主线程之外的 Javascript 线程。它脱离于浏览器窗体，可以帮我们实现离线缓存、消息推送和网络代理等功能。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("Service Worker")]),t._v("的话，传输协议必须为 HTTPS。因为 "),s("code",[t._v("Service Worker")]),t._v(" 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。")]),t._v(" "),s("p",[s("code",[t._v("Service Worker")]),t._v(" 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。")]),t._v(" "),s("p",[t._v("我们可以从 Chrome 的 F12 中，Application -> Cache Storage 找到。除了位置不同之外，这个缓存是永久性的，即关闭 TAB 或者浏览器，下次打开依然还在(而 "),s("code",[t._v("memory cache")]),t._v(" 不是)。有两种情况会导致这个缓存中的资源被清除：手动调用 API "),s("code",[t._v("caches.delete(resource)")]),t._v(" 或者容量超过限制，被浏览器全部清空。")]),t._v(" "),s("p",[s("code",[t._v("Service Worker")]),t._v(" 实现缓存功能一般分为三个步骤：首先需要先注册 "),s("code",[t._v("Service Worker")]),t._v("，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。")]),t._v(" "),s("p",[t._v("当 "),s("code",[t._v("Service Worker")]),t._v(" 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 "),s("code",[t._v("Service Worker")]),t._v(" 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 "),s("code",[t._v("memory cache")]),t._v(" 或者 "),s("code",[t._v("disk cache")]),t._v(" 中还是从网络请求中获取的数据，浏览器都会显示我们是从 "),s("code",[t._v("Service Worker")]),t._v(" 中获取的内容，即 "),s("code",[t._v("from ServiceWorker")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 判断当前浏览器是否支持serviceWorker */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'serviceWorker'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" navigator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当页面加载完成就创建一个serviceWorker */")]),t._v("\n  window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'load'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 创建并指定对应的执行内容 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* scope 参数是可选的，可以用来指定你想让 service worker 控制的内容的子目录\n    在这个例子里，我们指定了 '/'，表示 根网域下的所有内容。这也是默认值。 */")]),t._v("\n    navigator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serviceWorker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./serviceWorker.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" scope"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("registration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ServiceWorker registration successful with scope: '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" registration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ServiceWorker registration failed: '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// serviceWorker.js")]),t._v("\nself"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'install'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当确定要访问某些资源时，提前请求并添加到缓存中。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个模式叫做“预缓存”")]),t._v("\n  e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitUntil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    caches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'service-worker-test-precache'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cache")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/static/index.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/static/index.css'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nself"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fetch'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存中能找到就返回，找不到就网络请求，之后再写入缓存并返回。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个称为 CacheFirst 的缓存策略。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("respondWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    caches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'service-worker-test-precache'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cache")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("matchedResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" matchedResponse "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fetchedResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fetchedResponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fetchedResponse\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br")])]),s("h3",{attrs:{id:"memory-cache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[t._v("#")]),t._v(" memory cache")]),t._v(" "),s("p",[s("code",[t._v("memory cache")]),t._v("，是指存在内存中的缓存。包括当前中页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。")]),t._v(" "),s("p",[t._v("因为存储在内存中，"),s("code",[t._v("memory cache")]),t._v(" 是响应速度最快的一种缓存，但由于同样的原因，缓存持续性很短，会随着进程的释放而释放。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")]),t._v(" "),s("p",[t._v("计算机内存有限，比硬盘容量小很多，浏览器会考虑计算机具体情况来决定缓存放在内存中还是硬盘中。小文件优先缓存在内存中。")]),t._v(" "),s("p",[t._v("内存缓存中有一块重要的缓存资源是 "),s("code",[t._v("preloader")]),t._v(" 相关指令下载的资源。众所周知 "),s("code",[t._v("preloader")]),t._v(" 的相关指令已经是页面优化的常见手段之一，它可以一边解析js/css文件，一边网络请求下一个资源。")]),t._v(" "),s("p",[t._v("有些浏览器还会下载 css 中的 "),s("code",[t._v("@import")]),t._v(" 内容或者 "),s("code",[t._v("<video>")]),t._v(" 的 poster 等。而这些被 "),s("code",[t._v("preloader")]),t._v(" 请求过来的资源就会被放入 "),s("code",[t._v("memory cache")]),t._v(" 中，供之后的解析执行操作使用。"),s("code",[t._v("preload")]),t._v(" (虽然看上去和刚才的 "),s("code",[t._v("preloader")]),t._v(" 就差了俩字母)。实际上这个大家应该更加熟悉一些，例如 "),s("code",[t._v('<link rel="preload">')]),t._v("。这些显式指定的预加载资源，也会被放入 "),s("code",[t._v("memory cache")]),t._v(" 中。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[s("code",[t._v("memory cache")]),t._v(" 机制保证了一个页面中如果有两个相同的请求 (例如两个 "),s("code",[t._v("src")]),t._v(" 相同的 "),s("code",[t._v("<img>")]),t._v("，两个 "),s("code",[t._v("href")]),t._v(" 相同的 "),s("code",[t._v("<link>")]),t._v(") 都实际只会被请求最多一次，避免浪费。")]),t._v(" "),s("p",[t._v("不过在匹配缓存时，除了匹配完全相同的 URL 之外，还会比对他们的类型，CORS 中的域名规则等。因此一个作为脚本 (script) 类型被缓存的资源是不能用在图片 (image) 类型的请求中的，即便他们 "),s("code",[t._v("src")]),t._v(" 相等。")])]),t._v(" "),s("p",[t._v("在从 "),s("code",[t._v("memory cache")]),t._v(" 获取缓存内容时，浏览器会忽视例如 "),s("code",[t._v("max-age=0")]),t._v(", "),s("code",[t._v("no-cache")]),t._v(" 等头部配置。例如页面上存在几个相同 src 的图片，即便它们可能被设置为不缓存，但依然会从 "),s("code",[t._v("memory cache")]),t._v(" 中读取。这是因为 "),s("code",[t._v("memory cache")]),t._v(" 只是短期使用，大部分情况生命周期只有一次浏览而已。而 "),s("code",[t._v("max-age=0")]),t._v(" 在语义上普遍被解读为“不要在下次浏览时使用”，所以和 "),s("code",[t._v("memory cache")]),t._v(" 并不冲突。")]),t._v(" "),s("p",[t._v("但如果站长是真心不想让一个资源进入缓存，就连短期也不行，那就需要使用 "),s("code",[t._v("no-store")]),t._v("。存在这个头部配置的话，即便是 "),s("code",[t._v("memory cache")]),t._v(" 也不会存储，自然也不会从中读取了。")]),t._v(" "),s("h3",{attrs:{id:"disk-cache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[t._v("#")]),t._v(" disk cache")]),t._v(" "),s("p",[s("code",[t._v("disk cache")]),t._v(" 也叫 HTTP cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 "),s("code",[t._v("memory cache")]),t._v(" 胜在容量和存储时效性上。实际是存在于文件系统中的。而且它允许相同的资源在跨会话，甚至跨站点的情况下使用，例如两个站点都使用了同一张图片。")]),t._v(" "),s("p",[t._v("会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求")]),t._v(" "),s("p",[t._v("对于到底哪些文件会缓存进内存，哪些进硬盘，参考如下：")]),t._v(" "),s("ul",[s("li",[t._v("对于大文件来说，大概率是不存储在内存中的，反之优先")]),t._v(" "),s("li",[t._v("当前系统内存使用率高的话，文件优先存储进硬盘")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("有时候看到的是 "),s("code",[t._v("prefetch cache")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("prefetch cache"),s("OutboundLink")],1),t._v(" 是一种浏览器预加载机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。")]),t._v(" "),s("p",[t._v("如何实现：对要预加载的文件的 link 标签加上 "),s("code",[t._v('rel="prefetch"')])]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("prefetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/images/big.jpeg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 或者使用 meta 标签 --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Link"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("</images/big.jpeg>; rel=prefetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])]),t._v(" "),s("h3",{attrs:{id:"push-cache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[t._v("#")]),t._v(" Push Cache")]),t._v(" "),s("ul",[s("li",[t._v("Push Cache 推送缓存是 HTTP2 在 server push 阶段存在的缓存，当以上三种缓存都没有命中时，它才会被使用。")]),t._v(" "),s("li",[t._v("Push Cache 是一种存在于会话阶段的缓存，当 session 终止时，缓存也随之释放，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。")]),t._v(" "),s("li",[t._v("不同的页面只要共享了同一个 HTTP2 连接，那么它们就可以共享同一个 Push Cache。")]),t._v(" "),s("li",[t._v("Push Cache 中的缓存只能被使用一次")]),t._v(" "),s("li",[t._v("可以推送 "),s("code",[t._v("no-cache")]),t._v(" 和 "),s("code",[t._v("no-store")]),t._v(" 的资源")]),t._v(" "),s("li",[t._v("浏览器可以拒绝接受已经存在的资源推送")])]),t._v(" "),s("h3",{attrs:{id:"请求网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求网络"}},[t._v("#")]),t._v(" 请求网络")]),t._v(" "),s("p",[t._v("如果一个请求在上述四个缓存都没有命中，那么浏览器会正式发送网络请求去获取内容。之后容易想到，为了提升之后请求的缓存命中率，自然要把这个资源添加到缓存中去。具体来说：")]),t._v(" "),s("ul",[s("li",[t._v("根据 "),s("code",[t._v("Service Worker")]),t._v(" 中的 handler 决定是否存入 Cache Storage (额外的缓存位置)。")]),t._v(" "),s("li",[t._v("根据 HTTP 头部的相关字段("),s("code",[t._v("Cache-Control")]),t._v(", "),s("code",[t._v("Pragma")]),t._v("[p'ræɡmə] 等)决定是否存入 "),s("code",[t._v("disk cache")])]),t._v(" "),s("li",[s("code",[t._v("memory cache")]),t._v(" 保存一份资源的引用，以备下次使用。")])]),t._v(" "),s("h2",{attrs:{id:"按失效策略分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按失效策略分类"}},[t._v("#")]),t._v(" 按失效策略分类")]),t._v(" "),s("p",[s("code",[t._v("memory cache")]),t._v(" 是浏览器为了加快读取缓存速度而进行的自身的优化行为，不受开发者控制，也不受 HTTP 协议头的约束，算是一个黑盒。"),s("code",[t._v("Service Worker")]),t._v(" 是由开发者编写的额外的脚本，且缓存位置独立，出现也较晚，使用还不算太广泛。所以我们平时最为熟悉的其实是 "),s("code",[t._v("disk cache")]),t._v("，也叫 HTTP cache (因为不像 "),s("code",[t._v("memory cache")]),t._v("，它遵守 HTTP 协议头中的字段)。平时所说的"),s("strong",[t._v("强缓存")]),t._v("，"),s("strong",[t._v("协商缓存")]),t._v("，"),s("strong",[t._v("启发式缓存")]),t._v("，也都归于此类。")]),t._v(" "),s("h3",{attrs:{id:"强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),s("p",[t._v("强缓存的含义是，当客户端请求后，会先访问缓存数据库看缓存是否存在。如果存在则直接返回；不存在则请求真的服务器，响应后再写入缓存数据库。")]),t._v(" "),s("p",[t._v("强缓存直接减少请求数，是提升最大的缓存策略。 它的优化覆盖了文章开头提到过的请求数据的全部三个步骤。如果考虑使用缓存来优化网页性能的话，强缓存应该是首先被考虑的。")]),t._v(" "),s("ul",[s("li",[t._v("不会向服务器发送请求，直接从缓存中读取资源。")]),t._v(" "),s("li",[t._v("状态码：200，显示 "),s("code",[t._v("from disk cache")]),t._v(" 或 "),s("code",[t._v("from memory cache")]),t._v("。")]),t._v(" "),s("li",[t._v("设置两种 HTTP Header 实现："),s("code",[t._v("Expires")]),t._v(" [ɪkˈspaɪəz] 和 "),s("code",[t._v("Cache-Control")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"expires"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),s("p",[t._v("这是 HTTP 1.0 的字段，表示缓存到期时间，是一个绝对的时间 (当前时间+缓存时间)，如")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Expires: Thu, 10 Nov 2017 08:45:11 GMT\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在响应消息头中，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求。")]),t._v(" "),s("p",[t._v("但是，这个字段设置时有两个缺点：")]),t._v(" "),s("ol",[s("li",[t._v("由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效，重新请求该资源。此外，即使不考虑自行修改，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。")]),t._v(" "),s("li",[t._v("写法太复杂了。表示时间的字符串多个空格，少个字母，都会导致非法属性从而设置失效。")])]),t._v(" "),s("h4",{attrs:{id:"cache-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),s("p",[t._v("已知 Expires 的缺点之后，在HTTP/1.1中，增加了一个字段 Cache-Control，该字段表示资源缓存的最大有效时间，在该时间内，客户端不需要向服务器发送请求")]),t._v(" "),s("p",[t._v("这两者的区别就是前者是绝对时间，而后者是相对时间。如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Cache-Control: max-age=2592000\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("下面列举一些 "),s("code",[t._v("Cache-Control")]),t._v(" 字段常用的值：(完整的列表可以查看 MDN)")]),t._v(" "),s("ul",[s("li",[t._v("max-age：即最大有效时间，单位秒")]),t._v(" "),s("li",[t._v("s-maxage：同 "),s("code",[t._v("max-age")]),t._v(" 作用一样，只在代理服务器中生效（比如CDN缓存），"),s("code",[t._v("s-maxage")]),t._v(" 优先级高于 "),s("code",[t._v("max-age")]),t._v("，只对 "),s("code",[t._v("public")]),t._v(" 缓存有效。设置了 "),s("code",[t._v("s-maxage")]),t._v("，没设置 "),s("code",[t._v("public")]),t._v(" ，代理服务器也可以缓存这个资源。")]),t._v(" "),s("li",[t._v("must-revalidate：如果超过了 "),s("code",[t._v("max-age")]),t._v(" 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。")]),t._v(" "),s("li",[t._v("no-cache：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的协商缓存来决定。")]),t._v(" "),s("li",[t._v("no-store: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强缓存和协商缓存。")]),t._v(" "),s("li",[t._v("public：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)")]),t._v(" "),s("li",[t._v("private：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值。")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("这里有一个疑问："),s("code",[t._v("max-age=0")]),t._v(" 和 "),s("code",[t._v("no-cache")]),t._v(" 等价吗？")]),t._v(" "),s("p",[t._v("从规范的字面意思来说，"),s("code",[t._v("max-age")]),t._v(" 到期是 "),s("strong",[t._v("应该(SHOULD)")]),t._v(" 重新验证，而 "),s("code",[t._v("no-cache")]),t._v(" 是 "),s("strong",[t._v("必须(MUST)")]),t._v(" 重新验证。但实际情况以浏览器实现为准，大部分情况他们俩的行为还是一致的。（如果是 "),s("code",[t._v("max-age=0, must-revalidate")]),t._v(" 就和 "),s("code",[t._v("no-cache")]),t._v(" 等价了）")]),t._v(" "),s("p",[t._v("顺带一提，在 HTTP/1.1 之前，如果想使用 "),s("code",[t._v("no-cache")]),t._v("，通常是使用 "),s("code",[t._v("Pragma")]),t._v(" 字段，如 "),s("code",[t._v("Pragma: no-cache")]),t._v("(这也是 "),s("code",[t._v("Pragma")]),t._v(" 字段唯一的取值)。但是这个字段只是浏览器约定俗成的实现，并没有确切规范，因此缺乏可靠性。它应该只作为一个兼容字段出现，在当前的网络环境下其实用处已经很小。")]),t._v(" "),s("p",[t._v("总结一下，自从 HTTP/1.1 开始，"),s("code",[t._v("Expires")]),t._v(" 逐渐被 "),s("code",[t._v("Cache-Control")]),t._v(" 取代。 "),s("code",[t._v("Cache-Control")]),t._v(" 是一个相对时间，即使客户端时间发生改变，相对时间也不会随之改变，这样可以保持服务器和客户端的时间一致性。而且 "),s("code",[t._v("Cache-Control")]),t._v(" 的可配置性比较强大。")]),t._v(" "),s("p",[s("code",[t._v("Cache-Control")]),t._v(" 的优先级高于 "),s("code",[t._v("Expires")]),t._v("，为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段我们都会设置。")])]),t._v(" "),s("h3",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),s("p",[t._v("当 "),s("code",[t._v("Cache-Control")]),t._v(" 和 "),s("code",[t._v("Expires")]),t._v(" 过期或者它的属性设置为 "),s("code",[t._v("no-cache")]),t._v(" 时(即不走强缓存)，那么浏览器第二次请求时就会与服务器进行协商，与服务器端对比判断资源是否进行了修改更新。")]),t._v(" "),s("ul",[s("li",[t._v("如果服务器端的资源没有修改（"),s("code",[t._v("Not Modified")]),t._v("），那么就会返回304状态码，告诉浏览器可以使用缓存中的数据。返回的仅仅是一个状态码而已，并没有实际的文件内容，因此 在响应体体积上的节省是它的优化点。")]),t._v(" "),s("li",[t._v("如果数据有更新就会返回200状态码，服务器就会返回更新后的资源并且将缓存信息一起返回。")]),t._v(" "),s("li",[t._v("跟协商缓存相关的header头属性有两组 "),s("code",[t._v("ETag/If-None-Match")]),t._v("、 "),s("code",[t._v("Last-Modified/If-Modified-Since")]),t._v(" 请求头和响应头需要成对出现")])]),t._v(" "),s("h4",{attrs:{id:"last-modified-if-modified-since"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[t._v("#")]),t._v(" Last-Modified/If-Modified-Since")]),t._v(" "),s("ol",[s("li",[t._v("服务器通过 "),s("code",[t._v("Last-Modified")]),t._v(" 字段告知客户端，资源最后一次被修改的时间，在 response header 中，例如 "),s("code",[t._v("Last-Modified: Mon, 10 Nov 2018 09:10:11 GMT")])]),t._v(" "),s("li",[t._v("浏览器将这个值和内容一起记录在缓存数据库中。")]),t._v(" "),s("li",[t._v("下一次请求相同资源时时，浏览器从自己的缓存中找出“不确定是否过期的”缓存。因此在请求头中将上次的 "),s("code",[t._v("Last-Modified")]),t._v(" 的值写入到请求头的 "),s("code",[t._v("If-Modified-Since")]),t._v(" 字段\n服务器会将 "),s("code",[t._v("If-Modified-Since")]),t._v(" 的值与 "),s("code",[t._v("Last-Modified")]),t._v(" 字段进行对比。如果相等，则表示未修改，响应 304；反之，则表示修改了，响应 200 状态码，并返回数据。")])]),t._v(" "),s("p",[t._v("但是他还是有一定缺陷的：")]),t._v(" "),s("ul",[s("li",[t._v("如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。")]),t._v(" "),s("li",[t._v("如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。")])]),t._v(" "),s("h4",{attrs:{id:"etag-if-none-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[t._v("#")]),t._v(" Etag/If-None-Match")]),t._v(" "),s("p",[t._v("为了解决上述问题，出现了一组新的字段 "),s("code",[t._v("Etag")]),t._v(" 和 "),s("code",[t._v("If-None-Match")])]),t._v(" "),s("p",[s("code",[t._v("Etag")]),t._v(" 存储的是文件的特殊标识(一般都是 hash 生成的)，服务器存储着文件的 "),s("code",[t._v("Etag")]),t._v(" 字段。之后的流程和 "),s("code",[t._v("Last-Modified")]),t._v(" 一致，只是 "),s("code",[t._v("Last-Modified")]),t._v(" 字段和它所表示的更新时间改变成了 "),s("code",[t._v("Etag")]),t._v(" 字段和它所表示的文件 hash，把 "),s("code",[t._v("If-Modified-Since")]),t._v(" 变成了 "),s("code",[t._v("If-None-Match")]),t._v("。服务器同样进行比较，命中返回 304, 不命中返回新资源和 200。")]),t._v(" "),s("p",[s("code",[t._v("Etag")]),t._v(" 与 "),s("code",[t._v("Last-Modified")]),t._v(" 比较：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Etag")]),t._v(" 在感知文件变化上比 "),s("code",[t._v("Last-Modified")]),t._v(" 更加准确")]),t._v(" "),s("li",[s("code",[t._v("Etag")]),t._v(" 的生成过程需要服务器额外付出开销，会影响服务端的性能")]),t._v(" "),s("li",[s("code",[t._v("Etag")]),t._v(" 的优先级高于 "),s("code",[t._v("Last-Modified")])])]),t._v(" "),s("h3",{attrs:{id:"启发式缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启发式缓存"}},[t._v("#")]),t._v(" 启发式缓存")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("Expires")]),t._v("，"),s("code",[t._v("Cache-Control: max-age")]),t._v("，或 "),s("code",[t._v("Cache-Control: s-maxage")]),t._v(" 都没有在响应头中出现，并且设置了 "),s("code",[t._v("Last-Modified")]),t._v(" 时，那么浏览器默认会采用一个启发式的算法，即启发式缓存：根据响应头中2个时间字段 "),s("code",[t._v("Date")]),t._v(" 和 "),s("code",[t._v("Last-Modified")]),t._v(" 之间的时间差值，取其值的"),s("code",[t._v("10%")]),t._v("作为缓存时间周期。这是浏览器默认的缓存方式")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Date 减去 Last-Modified 值的 10% 作为缓存时间。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Date：创建报文的日期时间, Last-Modified 服务器声明文档最后被修改时间")]),t._v("\nresponse_is_fresh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Date "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Last"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Modified"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"缓存小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存小结"}},[t._v("#")]),t._v(" 缓存小结")]),t._v(" "),s("p",[t._v("当浏览器要请求资源时")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("调用 "),s("code",[t._v("Service Worker")]),t._v(" 的 "),s("code",[t._v("fetch")]),t._v(" 事件响应")])]),t._v(" "),s("li",[s("p",[t._v("查看 "),s("code",[t._v("memory cache")])])]),t._v(" "),s("li",[s("p",[t._v("查看 "),s("code",[t._v("disk cache")]),t._v("。这里又细分：")]),t._v(" "),s("ul",[s("li",[t._v("如果有强制缓存且未失效，则使用强制缓存，不请求服务器。这时的状态码全部是 200")]),t._v(" "),s("li",[t._v("如果有强制缓存但已失效，使用对比缓存，比较后确定 304 还是 200")])])])]),t._v(" "),s("p",[t._v("发送网络请求，等待网络响应")]),t._v(" "),s("ul",[s("li",[t._v("把响应内容存入 "),s("code",[t._v("disk cache")]),t._v(" (如果 HTTP 头信息配置可以存的话)")]),t._v(" "),s("li",[t._v("把响应内容的引用 存入 "),s("code",[t._v("memory cache")]),t._v(" (无视 HTTP 头信息的配置)")]),t._v(" "),s("li",[t._v("把响应内容存入 "),s("code",[t._v("Service Worker")]),t._v(" 的 Cache Storage (如果 "),s("code",[t._v("Service Worker")]),t._v(" 的脚本调用了 "),s("code",[t._v("cache.put()")]),t._v(")")])]),t._v(" "),s("h2",{attrs:{id:"用户行为对缓存的影响"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户行为对缓存的影响"}},[t._v("#")]),t._v(" 用户行为对缓存的影响")]),t._v(" "),s("p",[t._v("强制刷新，window下是 "),s("code",[t._v("Ctrl + F5")]),t._v(" ，mac下就是 "),s("code",[t._v("command + shift + R")])]),t._v(" "),s("BlogImage",{attrs:{src:"https://file.frenchleave.cn/1NfLkyjCfNoPg3AQH7bYSxvgNXFfgqYm/cache-table.webp"}}),t._v(" "),s("h2",{attrs:{id:"缓存的最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存的最佳实践"}},[t._v("#")]),t._v(" 缓存的最佳实践")]),t._v(" "),s("p",[t._v("整体的流程图：")]),t._v(" "),s("BlogImage",{attrs:{src:"https://file.frenchleave.cn/GvHSAQ69j50yOVEQ1LfXL3gFy2ELupMS/cache-flow.webp"}}),t._v(" "),s("p",[t._v("频繁变动的资源，使用协商缓存")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Cache-Control: no-cache\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("HTML 文件：")]),t._v(" "),s("p",[t._v("html页面缓存的设置主要是在 "),s("code",[t._v("<head>")]),t._v(" 标签中嵌入 "),s("code",[t._v("<meta>")]),t._v(" 标签，这种方式只对页面有效，对页面上的资源无效。")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("cache-control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Cache-Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("max-age=7200"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("不常变化的资源，静态资源，使用强缓存并配合文件名添加hash")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Cache-Control: max-age=31536000\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("CSS，JS，图片，给它们的 Cache-Control 配置一个很大的 max-age=31536000 (一年)")]),t._v(" "),s("p",[t._v("给文件名加上hash值，webpack给我们提供了三种哈希值计算方式：")]),t._v(" "),s("ul",[s("li",[t._v("hash：跟整个项目的构建相关，构建生成的文件hash值都是一样的，只要项目里有文件更改，整个项目构建的hash值都会更改。（不用这个）")]),t._v(" "),s("li",[t._v("chunkhash：根据不同的入口文件(Entry)进行依赖文件解析、构建对应的chunk，生成对应的hash值。")]),t._v(" "),s("li",[t._v("contenthash：由文件内容产生的hash值，内容不同产生的contenthash值也不一样。")])]),t._v(" "),s("h2",{attrs:{id:"其他一些关于缓存的知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他一些关于缓存的知识点"}},[t._v("#")]),t._v(" 其他一些关于缓存的知识点")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("缓存服务器版本")]),t._v(" "),s("p",[t._v("当 "),s("code",[t._v("Expires")]),t._v(" 和 "),s("code",[t._v("Cache-Control:max-age=xxx")]),t._v(" 同时存在的时候取决于缓存服务器应用的HTTP版本。应用HTTP/1.1版本的服务器会优先处理"),s("code",[t._v("max-age")]),t._v("，忽略 "),s("code",[t._v("Expires")]),t._v(" ，而应用HTTP/1.0版本的缓存服务器则会优先处理 "),s("code",[t._v("Expires")]),t._v(" 而忽略"),s("code",[t._v("max-age")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("Vary")]),t._v(" "),s("p",[t._v("Vary 是一个HTTP响应头部信息，它用来告诉服务器要用哪些头部信息来返回资源。")]),t._v(" "),s("p",[t._v("如果你提供给移动端的内容是不同的，怎么让缓存服务器区分移动端和PC端呢？可以设置User-Agent字段来区分不同的客户端")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Vary: User-Agent\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("源服务器启用了gzip压缩，但用户使用了比较旧的浏览器，不支持压缩，缓存服务器如何返回？")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Vary: Accept-Encoding\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("age")]),t._v(" "),s("p",[t._v("response headers里面的 age 表示命中代理服务器的缓存. 它指的是代理服务器对于请求资源的已缓存时间, 单位为秒。如果文件被修改或替换，Age会重新由0开始累计。age值为0表示代理服务器刚刚刷新了一次缓存。")])]),t._v(" "),s("li",[s("p",[t._v("date")]),t._v(" "),s("p",[t._v("指的是响应生成的时间。如果按F5频繁刷新发现响应里的Date没有改变，就说明命中了缓存服务器的缓存。")])]),t._v(" "),s("li",[s("p",[t._v("兼容性")]),t._v(" "),s("p",[t._v("在Firefox浏览器下，使用 "),s("code",[t._v("Cache-Control:no-cache")]),t._v(" 是不生效的，其识别的是 "),s("code",[t._v("no-store")]),t._v("。这样能达到其他浏览器使用 "),s("code",[t._v("Cache-Control:no-cache")]),t._v(" 的效果。所以为了兼容Firefox浏览器，经常会写成 "),s("code",[t._v("Cache-Control: no-cache,no-store")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("后端设置缓存")]),t._v(" "),s("p",[t._v("强缓存：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cache-Control'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'public, max-age=xxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("协商缓存：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cache-Control'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'public, max-age=0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Last-Modified'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ETag'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])]),t._v(" "),s("h2",{attrs:{id:"cdn缓存原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cdn缓存原理"}},[t._v("#")]),t._v(" CDN缓存原理")]),t._v(" "),s("p",[t._v("CDN的全称Content Delivery Network，)即内容分发网络。简而言之就是将静态资源文件（图片、视频、脚本等）缓存到距离用户最近位置的服务器上。因此用户在请求访问网站时，可以快速获取自己想要的内容。从而解决了跨运营商，跨地区，带宽小，CPU负载小所引起的响应速度慢等问题。")]),t._v(" "),s("p",[t._v("CDN网络是在用户和服务器之间增加Cache层，主要是通过接管DNS实现，将用户的请求引导到Cache上获得源服务器的数据，从而降低网络的访问的速度。")]),t._v(" "),s("p",[t._v("资源上传CDN之后，当用户访问CDN的资源地址之后会经历下面的步骤：")]),t._v(" "),s("ul",[s("li",[t._v("首先经过本地的DNS解析，请求cname指向的那台CDN专用的DNS服务器。")]),t._v(" "),s("li",[t._v("DNS服务器返回全局负载均衡的服务器IP给用户")]),t._v(" "),s("li",[t._v("用户请求全局负载均衡服务器，服务器根据IP返回所在区域的负载均衡服务器IP给用户")]),t._v(" "),s("li",[t._v("用户请求区域负载均衡服务器，负载均衡服务器根据用户IP选择距离近的，并且存在用户所需内容的，负载比较合适的一台缓存服务器IP给用户。当没有对应内容的时候，会去上一级缓存服务器去找，直到找到资源所在的源站服务器，并且缓存在缓存服务器中。用户下一次在请求该资源，就可以就近拿缓存了。")])]),t._v(" "),s("p",[t._v("注意： 因为CDN的负载均衡和就近选择缓存都是根据用户的IP来的，服务器只能拿到local DNS的IP，也就是网络设置中设置的DNS IP，如果这个设置的不合理，那么可能起不到加速的效果。可能就近找到的缓存服务器实际离得很远。")])],1)}),[],!1,null,null,null);a.default=n.exports}}]);