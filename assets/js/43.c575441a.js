(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{584:function(t,v,_){"use strict";_.r(v);var e=_(6),i=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("文章来源："),_("a",{attrs:{href:"https://mp.weixin.qq.com/s/5zz1qGmgi_EltT6nVnd_Tg",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("面试官：说说Git常用的命令有哪些？"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),_("p",[t._v("git的操作可以通过命令的形式执行，日常使用就如下6个命令即可")]),t._v(" "),_("BlogImage",{attrs:{src:"https://file.frenchleave.cn/4Ukr7uSxmEXwzJj8mQNYjWdjFm3mwhat/git-cyml.webp"}}),t._v(" "),_("ul",[_("li",[t._v("pull")]),t._v(" "),_("li",[t._v("fetch/clone")]),t._v(" "),_("li",[t._v("checkout")]),t._v(" "),_("li",[t._v("push")]),t._v(" "),_("li",[t._v("commit")]),t._v(" "),_("li",[t._v("add")])]),t._v(" "),_("p",[t._v("实际上，如果想要熟练使用，超过60多个命令需要了解，下面则介绍下常见的的git命令")]),t._v(" "),_("h2",{attrs:{id:"有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#有哪些"}},[t._v("#")]),t._v(" 有哪些")]),t._v(" "),_("p",[t._v("大致分成了以下几个类别")]),t._v(" "),_("ul",[_("li",[t._v("配置")]),t._v(" "),_("li",[t._v("初始化")]),t._v(" "),_("li",[t._v("日常基本操作")]),t._v(" "),_("li",[t._v("分支操作")]),t._v(" "),_("li",[t._v("远程同步")]),t._v(" "),_("li",[t._v("撤销")]),t._v(" "),_("li",[t._v("存储")])]),t._v(" "),_("h3",{attrs:{id:"配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),_("p",[_("code",[t._v("Git")]),t._v("自带一个"),_("code",[t._v("git config")]),t._v("的工具来帮助设置控制"),_("code",[t._v("Git")]),t._v("外观和行为的配置变量，在我们安装完"),_("code",[t._v("git")]),t._v("之后，第一件事就是设置你的用户名和邮件地址\n，后续每一个提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改")]),t._v(" "),_("p",[t._v("设置提交代码时的用户信息命令如下：")]),t._v(" "),_("div",{staticClass:"language-bash line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--global"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" user.name "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[name]"')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--global"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" user.email "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[email address]"')]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])]),_("h3",{attrs:{id:"启动"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[t._v("#")]),t._v(" 启动")]),t._v(" "),_("p",[t._v("一个git项目的初始有两个途径，分别是：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git init [project-name]")]),t._v("：创建或在当前目录初始化一个git代码库。")]),t._v(" "),_("li",[_("code",[t._v("git clone url")]),t._v("：下载一个项目和它的整个代码历史。")])]),t._v(" "),_("h3",{attrs:{id:"常用命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),_("p",[t._v("在日常工作中，代码常用的基本操作如下：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git init")]),t._v("：初始化仓库，默认为master分支。")]),t._v(" "),_("li",[_("code",[t._v("git add .")]),t._v("：提交全部文件修改到缓存区。")]),t._v(" "),_("li",[_("code",[t._v("git add <具体某个文件路径+全名>")]),t._v("：提交某些文件到缓存区。")]),t._v(" "),_("li",[_("code",[t._v("git diff")]),t._v("：查看当前代码add后，会add哪些内容。")]),t._v(" "),_("li",[_("code",[t._v("git diff --staged")]),t._v("：查看现在commit提交后，会提交哪些内容。")]),t._v(" "),_("li",[_("code",[t._v("git status")]),t._v(" 查看当前分支状态。")]),t._v(" "),_("li",[_("code",[t._v("git pull <远程仓库名> <远程分支名>")]),t._v("：拉取远程仓库的分支与本地当前分支合并。")]),t._v(" "),_("li",[_("code",[t._v("git pull <远程仓库名> <远程分支名>:<本地分支名>")]),t._v("：拉取远程仓库的分支与本地某个分支合并。")]),t._v(" "),_("li",[_("code",[t._v('git commit -m "<注释>"')]),t._v("：提交代码到本地仓库，并写提交注释。")]),t._v(" "),_("li",[_("code",[t._v("git commit -v")]),t._v("：提交时显示所有diff信息。")]),t._v(" "),_("li",[_("code",[t._v("git commit --amend [file1] [file2]")]),t._v("：重做上一次commit，并包括指定文件的新变化。")])]),t._v(" "),_("p",[t._v("关于提交信息的格式，可以遵循以下的规则：")]),t._v(" "),_("ul",[_("li",[t._v("feat：新特性，添加功能")]),t._v(" "),_("li",[t._v("fix：修改bug")]),t._v(" "),_("li",[t._v("refactor：代码重构")]),t._v(" "),_("li",[t._v("docs：文档修改")]),t._v(" "),_("li",[t._v("style：代码格式修改，注意不是css修改")]),t._v(" "),_("li",[t._v("test：测试用例修改")]),t._v(" "),_("li",[t._v("chore：其他修改，比如构建流程，依赖管理")])]),t._v(" "),_("h3",{attrs:{id:"分支操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("git branch")]),t._v("：查看本地所有分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git branch -r")]),t._v("：查看远程所有分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git branch -a")]),t._v("：查看本地和远程所有分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git merge <分支名>")]),t._v("：合并分支到当前分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git merge --abort")]),t._v("：合并分支出现冲突时，取消合并，一切回到合并前的状态。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git branch <新分支名>")]),t._v("：基于当前分支，新建一个分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git branch -d <分支名>")]),t._v("：删除本地某个分支（会在删除前检查merge状态（其与上游分支或者与head））。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git branch -D <分支名>")]),t._v("：删除本地某个分支（"),_("code",[t._v("git branch --delete --force")]),t._v("的简写）。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git branch <新分支名称> <提交ID>")]),t._v("：从提交历史恢复某个删掉的某个分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git branch -m <原分支名> <新分支名>")]),t._v("：分支更名。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git checkout --orphan <新分支名>")]),t._v("：新建一个空分支（会保留之前分支的所有文件）。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git checkout <分支名>")]),t._v("：切换到本地某个分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git checkout <远程库名>/<分支名>")]),t._v("：切换到线上某个分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git checkout -b <新分支名>")]),t._v("：基于当前分支新建分支，并切换到该分支。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git push <远程库名> --delete <分支名>")]),t._v("：删除远程某个分支。")])])]),t._v(" "),_("h3",{attrs:{id:"tag同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tag同步"}},[t._v("#")]),t._v(" tag同步")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git tag")]),t._v("：列出所有tag。")]),t._v(" "),_("li",[_("code",[t._v("git tag [tag名]")]),t._v("：创建轻量tag（无-m标注信息）。")]),t._v(" "),_("li",[_("code",[t._v("git tag -a [tag名]")]),t._v("：创建含注解的tag。")]),t._v(" "),_("li",[_("code",[t._v("git tag -l | xargs git tag -d")]),t._v("：删除所有本地tag。")]),t._v(" "),_("li",[_("code",[t._v("git fetch origin --prune")]),t._v("：从远程拉取所有信息。")]),t._v(" "),_("li",[_("code",[t._v("git ls-remote --tags origin")]),t._v("：查询远程tags。")]),t._v(" "),_("li",[_("code",[t._v("git push origin --tags")]),t._v("：推送所有本地tag到远程。")]),t._v(" "),_("li",[_("code",[t._v("git push origin [本地tag名]")]),t._v("：推送指定本地tag到远程。")]),t._v(" "),_("li",[_("code",[t._v("git tag -d [本地tag名]")]),t._v("：删除本地指定tag。")]),t._v(" "),_("li",[_("code",[t._v("git push origin :refs/tags/[远程tag名]")]),t._v("：删除远程指定tag。")]),t._v(" "),_("li",[_("code",[t._v("git fetch origin [远程tag名]")]),t._v("：拉取远程指定tag。")]),t._v(" "),_("li",[_("code",[t._v("git show [tag名]")]),t._v("：显示指定tag详细信息。")])]),t._v(" "),_("p",[t._v("在远程仓库删除了某个tag，在本地拉取，此时被删除的tag在本地还是存在，再次"),_("code",[t._v("push")]),t._v("的时候又会推到远程。也有那种在远程把某个tag删了，然后又打了一个名字一样的，导致后续推送出问题。解决方法：")]),t._v(" "),_("p",[t._v("首先删除所有本地tag，然后在从远程拉")]),t._v(" "),_("div",{staticClass:"language-bash line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -l "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git tag -l #列出所有本地tag")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git tag -d xxx #删除制定tag")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xargs 前面一个指令（git tag -l）的输出，作为后面一个指令（git tag -d）的传参")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin --prune\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br")])]),_("h3",{attrs:{id:"远程同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[t._v("#")]),t._v(" 远程同步")]),t._v(" "),_("p",[t._v("远程操作常见的命令：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git fetch [remote]")]),t._v("：下载远程仓库的所有变动。")]),t._v(" "),_("li",[_("code",[t._v("git remote -v")]),t._v("：显示所有远程仓库。")]),t._v(" "),_("li",[_("code",[t._v("git pull [remote] [branch]")]),t._v("：拉取远程仓库的分支与本地当前分支合并。")]),t._v(" "),_("li",[_("code",[t._v("git fetch")]),t._v("：获取线上最新版信息记录，不合并。")]),t._v(" "),_("li",[_("code",[t._v("git push [remote] [branch]")]),t._v("：上传本地指定分支到远程仓库。")]),t._v(" "),_("li",[_("code",[t._v("git push [remote] --force")]),t._v("：强行推送当前分支到远程仓库，即使有冲突。")]),t._v(" "),_("li",[_("code",[t._v("git push [remote] --all")]),t._v("：推送所有分支到远程仓库。")])]),t._v(" "),_("p",[t._v("远程仓库删除了分支，通过命令"),_("code",[t._v("git branch -r")]),t._v("查看还在，使用命令"),_("code",[t._v("git remote show origin")]),t._v("，可以查看remote地址，远程分支，还有本地分支与之相对应关系等信息。可以看到有些分支是标记为"),_("code",[t._v("tracked")]),t._v("，即该分支是被跟踪的，有些则标记为"),_("code",[t._v("stale(use 'git remote prune')")]),t._v("，意为不新鲜的旧的，就是已经被删除了的分支，按照提示使用"),_("code",[t._v("git remote prune origin")]),t._v("即可删除。")]),t._v(" "),_("h3",{attrs:{id:"撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("git checkout -- [file]")]),t._v("：恢复暂存区的指定文件到工作区。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git checkout [commit] [file]")]),t._v("：恢复某个commit的指定文件到暂存区和工作区。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git checkout .")]),t._v("：恢复暂存区的所有文件到工作区。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git reset [commit]")]),t._v("：重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git reset --hard")]),t._v("：重置暂存区与工作区，与上一次commit保持一致。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git reset [file]")]),t._v("：重置暂存区的指定文件，与上一次commit保持一致，但工作区不变。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git revert [commit]")]),t._v("：后者的所有变化都将被前者抵消，并且应用到当前分支。")])]),t._v(" "),_("li",[_("p",[t._v("reset：真实硬性回滚，目标版本后面的提交记录全部丢失了。")])]),t._v(" "),_("li",[_("p",[t._v("revert：同样回滚，这个回滚操作相当于一个提交，目标版本后面的提交记录也全部都有。")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("特性")]),t._v(" "),_("th",[t._v("reset")]),t._v(" "),_("th",[t._v("revert")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("作用")]),t._v(" "),_("td",[t._v("移动 HEAD 指针，撤销提交")]),t._v(" "),_("td",[t._v("创建新的提交，撤销指定提交的更改")])]),t._v(" "),_("tr",[_("td",[t._v("修改历史")]),t._v(" "),_("td",[t._v("是")]),t._v(" "),_("td",[t._v("否")])]),t._v(" "),_("tr",[_("td",[t._v("适用场景")]),t._v(" "),_("td",[t._v("本地提交撤销")]),t._v(" "),_("td",[t._v("远程提交撤销")])]),t._v(" "),_("tr",[_("td",[t._v("工作目录影响")]),t._v(" "),_("td",[t._v("可选（--soft、--mixed、--hard）")]),t._v(" "),_("td",[t._v("不影响工作目录")])]),t._v(" "),_("tr",[_("td",[t._v("团队协作影响")]),t._v(" "),_("td",[t._v("不适合已推送的提交")]),t._v(" "),_("td",[t._v("适合已推送的提交")])]),t._v(" "),_("tr",[_("td",[t._v("冲突处理")]),t._v(" "),_("td",[t._v("无冲突")]),t._v(" "),_("td",[t._v("可能需要解决冲突")])])])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("--soft")]),t._v("：移动HEAD指针，不修改暂存区和工作目录。适合撤销提交但保留更改。")]),t._v(" "),_("li",[_("code",[t._v("--mixed")]),t._v("（默认模式）：移动HEAD指针，并重置暂存区，但不修改工作目录。适合撤销提交并将更改放回工作目录。")]),t._v(" "),_("li",[_("code",[t._v("--hard")]),t._v("：移动HEAD指针，并重置暂存区和工作目录。适合彻底撤销提交和所有更改。")])]),t._v(" "),_("p",[t._v("存储操作")]),t._v(" "),_("p",[t._v("你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作，但又不想提交这些杂乱的代码，这时候可以将代码进行存储：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git stash")]),t._v("：暂时将未提交的变化移除。")]),t._v(" "),_("li",[_("code",[t._v("git stash pop")]),t._v("：取出储藏中最后存入的工作状态进行恢复，会删除储藏。")]),t._v(" "),_("li",[_("code",[t._v("git stash list")]),t._v("：查看所有储藏中的工作。")]),t._v(" "),_("li",[_("code",[t._v("git stash apply <储藏的名称>")]),t._v("：取出储藏中对应的工作状态进行恢复，不会删除储藏。")]),t._v(" "),_("li",[_("code",[t._v("git stash clear")]),t._v("：清空所有储藏中的工作。")]),t._v(" "),_("li",[_("code",[t._v("git stash drop <储藏的名称>")]),t._v("：删除对应的某个储藏。")])]),t._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("p",[t._v("git常用命令速查表如下所示：")]),t._v(" "),_("BlogImage",{attrs:{src:"https://file.frenchleave.cn/cITmKgzFQrfSqzNn7BK9u3UmbpqnjRAg/git-mlscb.webp"}})],1)}),[],!1,null,null,null);v.default=i.exports}}]);