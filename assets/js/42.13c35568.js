(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{577:function(v,_,t){"use strict";t.r(_);var s=t(6),a=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("文章来源："),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/62YQORpsGCmKV4ydE2yTFw",target:"_blank",rel:"nofollow noopener noreferrer"}},[v._v("面试官：说说你对git stash 的理解？应用场景？"),t("OutboundLink")],1)]),v._v(" "),t("h2",{attrs:{id:"是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[v._v("#")]),v._v(" 是什么")]),v._v(" "),t("p",[v._v("stash，译为存放，在 "),t("code",[v._v("git")]),v._v(" 中，可以理解为保存当前工作进度，会把暂存区和工作区的改动进行保存，这些修改会保存在一个栈上，后续你可以在任何时候任何分支重新将某次的修改推出来，重新应用这些更改的代码")]),v._v(" "),t("p",[v._v("默认情况下，"),t("code",[v._v("git stash")]),v._v("会缓存下列状态的文件：")]),v._v(" "),t("ul",[t("li",[v._v("添加到暂存区的修改（staged changes）")]),v._v(" "),t("li",[v._v("Git跟踪的但并未添加到暂存区的修改（unstaged changes）")])]),v._v(" "),t("p",[v._v("但以下状态的文件不会缓存：")]),v._v(" "),t("ul",[t("li",[v._v("在工作目录中新的文件（untracked files）")]),v._v(" "),t("li",[v._v("被忽略的文件（ignored files）")])]),v._v(" "),t("p",[v._v("如果想要上述的文件都被缓存，可以使用"),t("code",[v._v("-u")]),v._v("或者"),t("code",[v._v("--include-untracked")]),v._v("可以缓存工作目录新的文件，使用"),t("code",[v._v("-a")]),v._v("或者"),t("code",[v._v("--all")]),v._v("命令可以缓存当前目录下的所有修改")]),v._v(" "),t("h2",{attrs:{id:"如何使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[v._v("#")]),v._v(" 如何使用")]),v._v(" "),t("p",[v._v("关于"),t("code",[v._v("git stash")]),v._v("常见的命令如下：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("git stash")]),v._v(" "),t("p",[v._v("保存当前工作进度，会把暂存区和工作区的改动保存起来")])]),v._v(" "),t("li",[t("p",[v._v("git stash save")]),v._v(" "),t("p",[t("code",[v._v("git stash save")]),v._v("可以用于存储修改，并且将"),t("code",[v._v("git")]),v._v("的工作状态切回到"),t("code",[v._v("HEAD")]),v._v("，也就是上一次合法提交上")]),v._v(" "),t("p",[v._v("如果给定具体的文件路径，"),t("code",[v._v("git stash")]),v._v("只会处理路径下的文件，其他的文件不会被存储，其存在一些参数：")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("--keep-index")]),v._v(" 或者 "),t("code",[v._v("-k")]),v._v(" 只会存储为加入 "),t("code",[v._v("git")]),v._v(" 管理的文件")]),v._v(" "),t("li",[t("code",[v._v("--include-untracked")]),v._v(" 为追踪的文件也会被缓存,当前的工作空间会被恢复为完全清空的状态")]),v._v(" "),t("li",[t("code",[v._v("-a")]),v._v(" 或者 "),t("code",[v._v("--all")]),v._v(" 命令可以当前目录下的所有修改，包括被 "),t("code",[v._v("git")]),v._v(" 忽略的文件")])])]),v._v(" "),t("li",[t("p",[v._v("git stash list")]),v._v(" "),t("p",[v._v("显示保存进度的列表。也就意味着，"),t("code",[v._v("git stash")]),v._v("命令可以多次执行，当多次使用"),t("code",[v._v("git stash")]),v._v("命令后，栈里会充满未提交的代码")])]),v._v(" "),t("li",[t("p",[v._v("git stash pop")]),v._v(" "),t("p",[t("code",[v._v("git stash pop")]),v._v(" 从栈中读取最近一次保存的内容，也就是栈顶的"),t("code",[v._v("stash")]),v._v("会恢复到工作区，也可以通过 "),t("code",[v._v("git stash pop + stash名字")]),v._v(" 执行恢复哪个"),t("code",[v._v("stash")]),v._v("恢复到当前目录，如果从stash中恢复的内容和当前目录中的内容发生了冲突，则需要手动修复冲突或者创建新的分支来解决冲突")])]),v._v(" "),t("li",[t("p",[v._v("git stash apply")]),v._v(" "),t("p",[v._v("将堆栈中的内容应用到当前目录，不同于"),t("code",[v._v("git stash pop")]),v._v("，该命令不会将内容从堆栈中删除，也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况，同样，可以通过"),t("code",[v._v("git stash apply + stash名字")]),v._v(" 执行恢复哪个"),t("code",[v._v("stash")]),v._v("恢复到当前目录")])]),v._v(" "),t("li",[t("p",[v._v("git stash show")]),v._v(" "),t("p",[v._v("查看堆栈中最新保存的"),t("code",[v._v("stash")]),v._v("和当前目录的差异")]),v._v(" "),t("p",[v._v("通过使用"),t("code",[v._v("git stash show -p")]),v._v("查看详细的不同")]),v._v(" "),t("p",[v._v("通过使用 "),t("code",[v._v("git stash show stash@{1}")]),v._v(" 查看指定的"),t("code",[v._v("stash")]),v._v("和当前目录差异")])]),v._v(" "),t("li",[t("p",[v._v("git stash drop")]),v._v(" "),t("p",[t("code",[v._v("git stash drop + stash名称")]),v._v(" 表示从堆栈中移除某个指定的"),t("code",[v._v("stash")])])]),v._v(" "),t("li",[t("p",[v._v("git stash clear")]),v._v(" "),t("p",[v._v("删除所有存储的进度")])])]),v._v(" "),t("h2",{attrs:{id:"应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[v._v("#")]),v._v(" 应用场景")]),v._v(" "),t("p",[v._v("当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态， 而这时你想要切换到另一个分支或者拉下远端的代码去做一点别的事情，但是你创建一次未完成的代码的"),t("code",[v._v("commit")]),v._v("提交，这时候就可以使用"),t("code",[v._v("git stash")])]),v._v(" "),t("p",[v._v("例如以下场景：")]),v._v(" "),t("p",[v._v("当你的开发进行到一半,但是代码还不想进行提交,然后需要同步去关联远端代码时.如果你本地的代码和远端代码没有冲突时,可以直接通过"),t("code",[v._v("git pull")]),v._v("解决")]),v._v(" "),t("p",[v._v("但是如果可能发生冲突怎么办.直接"),t("code",[v._v("git pull")]),v._v("会拒绝覆盖当前的修改，这时候就可以依次使用下述的命令：")]),v._v(" "),t("ul",[t("li",[v._v("git stash")]),v._v(" "),t("li",[v._v("git pull")]),v._v(" "),t("li",[v._v("git stash pop")])]),v._v(" "),t("p",[v._v("或者当你开发到一半，现在要修改别的分支问题的时候，你也可以使用"),t("code",[v._v("git stash")]),v._v("缓存当前区域的代码")]),v._v(" "),t("ul",[t("li",[v._v("git stash：保存开发到一半的代码")]),v._v(" "),t("li",[v._v("git commit -m '修改问题'")]),v._v(" "),t("li",[v._v("git stash pop：将代码追加到最新的提交之后")])])])}),[],!1,null,null,null);_.default=a.exports}}]);