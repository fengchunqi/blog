(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{622:function(e,v,_){"use strict";_.r(v);var t=_(6),n=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"vue2的diff算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue2的diff算法"}},[e._v("#")]),e._v(" vue2的diff算法")]),e._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/vuejs/vue/blob/5255841aaff441d275122b4abfb099b881de7cb5/src/core/vdom/patch.js#L404",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("patch.js/updateChildren"),_("OutboundLink")],1)]),e._v(" "),_("p",[e._v("diff算法是一种通过同层的树节点进行比较的高效算法。")]),e._v(" "),_("p",[e._v("其有两个特点：")]),e._v(" "),_("ol",[_("li",[e._v("比较只会在同层级进行，不会跨层级比较。")]),e._v(" "),_("li",[e._v("在diff比较的过程中，循环从两边向中间比较。")])]),e._v(" "),_("p",[e._v("在vue中，作用于虚拟DOM渲染成真实DOM的新旧VNode节点比较。")]),e._v(" "),_("p",[e._v("当数据发生改变时，"),_("code",[e._v("set")]),e._v("方法会调用"),_("code",[e._v("Dep.notify")]),e._v("通知所有订阅者"),_("code",[e._v("Watcher")]),e._v("，订阅者就会调用"),_("code",[e._v("patch")]),e._v("给真实的DOM打补丁，更新相应的视图。")]),e._v(" "),_("p",[_("code",[e._v("patch")]),e._v("函数前两个参数位为"),_("code",[e._v("oldVnode")]),e._v("和"),_("code",[e._v("Vnode")]),e._v("，分别代表新的节点和之前的旧节点，主要做了四个判断：")]),e._v(" "),_("ol",[_("li",[e._v("没有新节点，直接触发旧节点的"),_("code",[e._v("destory")]),e._v("钩子。")]),e._v(" "),_("li",[e._v("没有旧节点，说明是页面刚开始初始化的时候，所有节点都是新建，所以只调用"),_("code",[e._v("createElm")]),e._v("。")]),e._v(" "),_("li",[e._v("旧节点和新节点自身一样，通过"),_("code",[e._v("sameVnode")]),e._v("判断节点是否一样，一样时，直接调用"),_("code",[e._v("patchVnode")]),e._v("去处理这两个节点。")]),e._v(" "),_("li",[e._v("旧节点和新节点自身不一样，当两个节点不一样的时候，直接创建新节点，删除旧节点。")])]),e._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("sameVnode")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" b")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// key值是否一样")]),e._v("\n    a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 标签名是否一样")]),e._v("\n        a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("tag "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("tag "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 是否都为注释节点")]),e._v("\n        a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("isComment "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("isComment "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 是否都定义了data")]),e._v("\n        "),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("isDef")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("data"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("isDef")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("data"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 当标签为input时，type必须是否相同")]),e._v("\n        "),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("sameInputType")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("||")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n        "),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("isTrue")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("isAsyncPlaceholder"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v("\n        a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("asyncFactory "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("asyncFactory "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v("\n        "),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("isUndef")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("asyncFactory"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("error"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br"),_("span",{staticClass:"line-number"},[e._v("9")]),_("br"),_("span",{staticClass:"line-number"},[e._v("10")]),_("br"),_("span",{staticClass:"line-number"},[e._v("11")]),_("br"),_("span",{staticClass:"line-number"},[e._v("12")]),_("br"),_("span",{staticClass:"line-number"},[e._v("13")]),_("br"),_("span",{staticClass:"line-number"},[e._v("14")]),_("br"),_("span",{staticClass:"line-number"},[e._v("15")]),_("br"),_("span",{staticClass:"line-number"},[e._v("16")]),_("br"),_("span",{staticClass:"line-number"},[e._v("17")]),_("br"),_("span",{staticClass:"line-number"},[e._v("18")]),_("br"),_("span",{staticClass:"line-number"},[e._v("19")]),_("br"),_("span",{staticClass:"line-number"},[e._v("20")]),_("br"),_("span",{staticClass:"line-number"},[e._v("21")]),_("br")])]),_("p",[_("code",[e._v("patchVnode")]),e._v("主要做了几个判断：")]),e._v(" "),_("ol",[_("li",[e._v("新节点是否是文本节点，如果是，则直接更新DOM的文本内容为新节点的文本内容。")]),e._v(" "),_("li",[e._v("新节点和旧节点如果都有子节点，则处理比较更新子节点。")]),e._v(" "),_("li",[e._v("只有新节点有子节点，旧节点没有，那么直接全部新建。")]),e._v(" "),_("li",[e._v("只有旧节点有子节点而新节点没有，那么删除旧节点的子节点。")])]),e._v(" "),_("p",[e._v("子节点不完全一致，则调用"),_("code",[e._v("updateChildren")]),e._v("，循环做如下满足条件的判断：")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("如果"),_("code",[e._v("oldStartVnode")]),e._v("（旧前）不存在，则"),_("code",[e._v("oldStartVnode")]),e._v("右移。（由于在之前的比较中，某些节点已经被处理过并从旧子节点列表中移除了）")])]),e._v(" "),_("li",[_("p",[e._v("如果"),_("code",[e._v("oldEndVnode")]),e._v("（旧后）不存在，则"),_("code",[e._v("oldEndVnode")]),e._v("左移。")])]),e._v(" "),_("li",[_("p",[e._v("旧前新前：如果"),_("code",[e._v("oldStartVnode")]),e._v("与"),_("code",[e._v("newStartVnode")]),e._v("相同，直接"),_("code",[e._v("patchVnode")]),e._v("，同时"),_("code",[e._v("oldStartVnode")]),e._v("右移，"),_("code",[e._v("newStartVnode")]),e._v("右移。")])]),e._v(" "),_("li",[_("p",[e._v("旧后新后：如果"),_("code",[e._v("oldEndVnode")]),e._v("与"),_("code",[e._v("newEndVnode")]),e._v("相同，直接"),_("code",[e._v("patchVnode")]),e._v("，同时"),_("code",[e._v("oldEndVnode")]),e._v("左移，"),_("code",[e._v("newEndVnode")]),e._v("左移。")])]),e._v(" "),_("li",[_("p",[e._v("旧前新后：如果"),_("code",[e._v("oldStartVnode")]),e._v("与"),_("code",[e._v("newEndVnode")]),e._v("相同，"),_("code",[e._v("patchVnode")]),e._v("后将"),_("code",[e._v("oldStartVnode")]),e._v("对应的真实DOM移动到"),_("code",[e._v("oldEndVnode")]),e._v("对应的真是DOM之后，同时"),_("code",[e._v("oldStartVnode")]),e._v("右移，"),_("code",[e._v("newEndVnode")]),e._v("左移。")])]),e._v(" "),_("li",[_("p",[e._v("旧后新前：如果"),_("code",[e._v("oldEndVnode")]),e._v("与"),_("code",[e._v("newStartVnode")]),e._v("相同，"),_("code",[e._v("patchVnode")]),e._v("后将"),_("code",[e._v("oldEndVnode")]),e._v("对应的真实DOM移动到"),_("code",[e._v("oldStartVnode")]),e._v("对应的真是DOM之前，同时"),_("code",[e._v("oldEndVnode")]),e._v("左移，"),_("code",[e._v("newStartVnode")]),e._v("右移。")])]),e._v(" "),_("li",[_("p",[e._v("如果上述4种四种通过前后指针对比的方式都没找到相同节点，则：")]),e._v(" "),_("ol",[_("li",[e._v("如果"),_("code",[e._v("newStartVnode")]),e._v("指定了"),_("code",[e._v("key")]),e._v("，则把剩余的旧节点（"),_("code",[e._v("[oldStartIdx, oldEndIdx]")]),e._v("区间内）映射成"),_("code",[e._v("{child.key: index}")]),e._v("，找到"),_("code",[e._v("key")]),e._v("相同的节点。如果"),_("code",[e._v("newStartVnode")]),e._v("未指定"),_("code",[e._v("key")]),e._v("，则遍历"),_("code",[e._v("[oldStartIdx, oldEndIdx]")]),e._v("区间内，找到与"),_("code",[e._v("newStartVnode")]),e._v("相同的节点。")]),e._v(" "),_("li",[e._v("如果上述步骤未找到节点，则在"),_("code",[e._v("newStartIdx")]),e._v("处新建并插入；如果找到了节点，判断与"),_("code",[e._v("newStartVnode")]),e._v("是否相同，如果相同则移动到旧开始节点"),_("code",[e._v("oldStartVnode")]),e._v("对应的真实DOM之前，如果不同则说明即使元素"),_("code",[e._v("key")]),e._v("相同，但是是不同元素，则在"),_("code",[e._v("newStartIdx")]),e._v("处新建并插入。")])]),e._v(" "),_("p",[e._v("最后"),_("code",[e._v("newStartVnode")]),e._v("右移。")])])]),e._v(" "),_("p",[e._v("循环结束：")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("旧开始索引大于旧结束索引")]),e._v(" "),_("p",[e._v("说明旧节点列表遍历完，新节点列表剩余节点全部需要新增，对应"),_("code",[e._v("[newStartIdx, newEndIdx]")]),e._v("，插入到新结束节点的后一个节点之前。")])]),e._v(" "),_("li",[_("p",[e._v("新开始索引大于新结束索引")]),e._v(" "),_("p",[e._v("说明新节点列表遍历完，旧节点列表剩余节点全部需要移除，对应"),_("code",[e._v("[oldStartIdx, oldEndIdx]")]),e._v("。")])])]),e._v(" "),_("h2",{attrs:{id:"vue3的diff算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue3的diff算法"}},[e._v("#")]),e._v(" vue3的diff算法")]),e._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/vuejs/core/blob/main/packages/runtime-core/src/renderer.ts#L1763",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("renderer.ts/patchKeyedChildren"),_("OutboundLink")],1)]),e._v(" "),_("ol",[_("li",[_("p",[e._v("前置预处理：定义指针"),_("code",[e._v("i")]),e._v("指向新旧节点列表的头节点，依次往右循环比较，判断节点是否相同，如相同则更新，不同则结束循环（任意指针移动到节点列表末尾时终止循环）。")])]),e._v(" "),_("li",[_("p",[e._v("后置预处理：定义指针"),_("code",[e._v("e1")]),e._v("、"),_("code",[e._v("e2")]),e._v("分别指向旧节点列表和新节点列表的结束节点，依次往左循环比较，判断节点是否相同，如相同则更新，不同则结束循环（任意指针小于前置预处理得到的"),_("code",[e._v("i")]),e._v("时终止循环）。")])]),e._v(" "),_("li",[_("p",[e._v("普通序列新增：如果旧节点列表遍历完（"),_("code",[e._v("i > e1")]),e._v("）并且新节点列表存在剩余（"),_("code",[e._v("i <= e2")]),e._v("），则在区间"),_("code",[e._v("[i, e2]")]),e._v("内的节点都需要新增，新建的节点插入到"),_("code",[e._v("c2[e2 + 1]")]),e._v("（"),_("code",[e._v("c2")]),e._v("代表新节点列表）之前。")])]),e._v(" "),_("li",[_("p",[e._v("普通序列删除：如果新节点列表遍历完（"),_("code",[e._v("i > e2")]),e._v("）并且旧节点列表存在剩余（"),_("code",[e._v("i <= e1")]),e._v("），则在区间"),_("code",[e._v("[i, e1]")]),e._v("内的节点都需要删除，直接依次执行卸载操作。")])]),e._v(" "),_("li",[_("p",[e._v("其余序列（可能包含新增、删除、移动）")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("5.1 根据新节点列表创建新节点的"),_("code",[e._v("key")]),e._v("与索引对应的映射（"),_("code",[e._v("keyToNewIndexMap")]),e._v("）。")])]),e._v(" "),_("li",[_("p",[e._v("5.2 遍历旧节点列表剩余节点并尝试更新，匹配节点并删除不存在的节点。")]),e._v(" "),_("ul",[_("li",[e._v("创建新节点索引与旧节点索引的映射表"),_("code",[e._v("newIndexToOldIndexMap")]),e._v("，并初始为0。")]),e._v(" "),_("li",[e._v("记录待更新节点的数量和已更新节点的数量，如果已更新节点的数量达到了待更新节点数量，则说明剩余旧节点都需要卸载。")]),e._v(" "),_("li",[e._v("如果旧节点有"),_("code",[e._v("key")]),e._v("值，则通过"),_("code",[e._v("key")]),e._v("在"),_("code",[e._v("keyToNewIndexMap")]),e._v("中找到新节点对应的索引，否则再次遍历剩余新节点通过"),_("code",[e._v("isSameVNodeType")]),e._v("方法判断是否是相同节点，得到对应索引"),_("code",[e._v("newIndex")]),e._v("。如果找不到对应节点则说明该节点需要卸载，有对应节点则进行更新（更新节点数量加1）并且"),_("code",[e._v("newIndexToOldIndexMap")]),e._v("对应的索引（"),_("code",[e._v("newIndex - s2")]),e._v("，"),_("code",[e._v("s2")]),e._v("代表前置预处理之后的索引"),_("code",[e._v("i")]),e._v("）设置为旧节点索引加1（"),_("code",[e._v("i + 1")]),e._v("，加1为了与新增节点为0做区分，如果第一个节点就相同，"),_("code",[e._v("i")]),e._v("就为0），如果当前的"),_("code",[e._v("newIndex")]),e._v("大于之前更新能达到的新节点的最大索引值（"),_("code",[e._v("maxNewIndexSoFar")]),e._v("），否则设置移动标识为"),_("code",[e._v("true")]),e._v("。")])])]),e._v(" "),_("li",[_("p",[e._v("5.3 从后往前遍历新节点的剩余节点（也就是遍历"),_("code",[e._v("newIndexToOldIndexMap")]),e._v("），根据"),_("code",[e._v("newIndexToOldIndexMap")]),e._v("对应的值判断。")]),e._v(" "),_("ul",[_("li",[e._v("如果是0则说明该节点需要新增，新建并插入到新节点列表的末尾节点之前。")]),e._v(" "),_("li",[e._v("否则根据之前的移动标识判断是否需要对节点进行移动，根据新旧节点索引映射（"),_("code",[e._v("newIndexToOldIndexMap")]),e._v("）找到其中最长的递增子序列（目的是最小化的移动DOM）并返回对应索引，判断递增子序列的对应索引与当前遍历的索引是否相等，不相等则需要移动该节点到新节点列表中对应位置的下一个节点之前（"),_("code",[e._v("newIndex + 1")]),e._v("之前）。")])])])])])]),e._v(" "),_("p",[e._v("上述是提供了"),_("code",[e._v("key")]),e._v("的逻辑，如果没有提供"),_("code",[e._v("key")]),e._v("，则以新旧节点最小长度的节点作为复用，依次更新每个节点（原地复用），如果旧节点有剩余旧卸载，新节点有剩余则新增。")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("patchFlag")]),e._v("：用于标记虚拟节点的动态部分，帮助Vue3在对比新旧节点时快速定位需要更新的部分，从而避免全量对比。")])]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("值（二进制）")]),e._v(" "),_("th",[e._v("常量名")]),e._v(" "),_("th",[e._v("描述")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("1")]),e._v(" "),_("td",[e._v("TEXT")]),e._v(" "),_("td",[e._v("动态文本内容（例如："),_("code",[e._v(e._s(e.message))]),e._v("）")])]),e._v(" "),_("tr",[_("td",[e._v("2")]),e._v(" "),_("td",[e._v("CLASS")]),e._v(" "),_("td",[e._v("动态class（例如："),_("code",[e._v(':class="{ active: isActive }"')]),e._v("）")])]),e._v(" "),_("tr",[_("td",[e._v("4")]),e._v(" "),_("td",[e._v("STYLE")]),e._v(" "),_("td",[e._v("动态style（例如："),_("code",[e._v(':style="{ color: textColor }"')]),e._v("）")])]),e._v(" "),_("tr",[_("td",[e._v("8")]),e._v(" "),_("td",[e._v("PROPS")]),e._v(" "),_("td",[e._v("动态属性（例如："),_("code",[e._v(':id="dynamicId"')]),e._v("）")])])])]),e._v(" "),_("ul",[_("li",[_("code",[e._v("shapeFlag")]),e._v("：用于标记虚拟节点的结构特征，帮助Vue3快速判断节点的类型和内容，从而优化对比和渲染逻辑。")])]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("值（二进制）")]),e._v(" "),_("th",[e._v("常量名")]),e._v(" "),_("th",[e._v("描述")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("1")]),e._v(" "),_("td",[e._v("ELEMENT")]),e._v(" "),_("td",[e._v("普通元素节点（例如："),_("code",[e._v("<div>")]),e._v("）")])]),e._v(" "),_("tr",[_("td",[e._v("2")]),e._v(" "),_("td",[e._v("FUNCTIONAL_COMPONENT")]),e._v(" "),_("td",[e._v("函数式组件")])]),e._v(" "),_("tr",[_("td",[e._v("4")]),e._v(" "),_("td",[e._v("STATEFUL_COMPONENT")]),e._v(" "),_("td",[e._v("有状态组件")])]),e._v(" "),_("tr",[_("td",[e._v("8")]),e._v(" "),_("td",[e._v("TEXT_CHILDREN")]),e._v(" "),_("td",[e._v("子节点是文本（例如："),_("code",[e._v("<div>Hello</div>")]),e._v("）")])]),e._v(" "),_("tr",[_("td",[e._v("16")]),e._v(" "),_("td",[e._v("ARRAY_CHILDREN")]),e._v(" "),_("td",[e._v("子节点是数组（例如："),_("code",[e._v("<div><span></span></div>")]),e._v("）")])])])]),e._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" vnode "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  type"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v("'div'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  patchFlag"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 动态文本内容，告诉Vue3只需要对比文本内容，而不需要对比其他部分。")]),e._v("\n  shapeFlag"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 普通元素节点+文本子节点，告诉Vue3这是一个普通元素节点，且子节点是文本。")]),e._v("\n  children"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Hello, {{ name }}'")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br")])]),_("h2",{attrs:{id:"react的diff算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#react的diff算法"}},[e._v("#")]),e._v(" react的diff算法")]),e._v(" "),_("p",[e._v("react是基于vdom的前端框架，组件渲染产生vdom，渲染器把vdom渲染成DOM。浏览器下使用react-dom的渲染器，会先把vdom转成fiber，找到需要更新DOM的部分，打上增删改的"),_("code",[e._v("effectTag")]),e._v("标记，这个过程叫做"),_("code",[e._v("reconcile")]),e._v("，可以打断，由"),_("code",[e._v("scheducler")]),e._v("调度执行。"),_("code",[e._v("reconcile")]),e._v("结束之后一次性根据"),_("code",[e._v("effectTag")]),e._v("更新DOM，叫做"),_("code",[e._v("commit")]),e._v("。打上"),_("code",[e._v("effectTag")]),e._v("可以标识这个fiber发生了怎样的变化，例如：新增（Placement）、更新（Update）、删除（Deletion），这些被打上flag的fiber会在"),_("code",[e._v("complete")]),e._v("阶段被收集起来，形成一个"),_("code",[e._v("effectList")]),e._v("链表，只包含这些需要操作的fiber，最后在"),_("code",[e._v("commit")]),e._v("阶段被更新掉。")]),e._v(" "),_("p",[e._v("这就是react的基于fiber的渲染流程，分成"),_("code",[e._v("render")]),e._v("（"),_("code",[e._v("reconcile")]),e._v("+"),_("code",[e._v("schedule")]),e._v("）、"),_("code",[e._v("commit")]),e._v("两个阶段。当渲染完一次，产生了fiber之后，再次渲染的vdom要和之前的fiber对比下，再决定如何产生新的fiber，目标是尽可能复用已有的fiber节点，这叫做diff算法。")]),e._v(" "),_("p",[e._v("react的diff算法采用分层对比的策略，即只对比同一层级的节点，而不是跨层级对比。")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("对比根节点")]),e._v(" "),_("ul",[_("li",[e._v("如果根节点的类型不同，react会直接销毁旧树，创建新树，没有移动操作。")]),e._v(" "),_("li",[e._v("如果根节点的类型相同，react会对比属性和子节点。")])])]),e._v(" "),_("li",[_("p",[e._v("对比子节点")])])]),e._v(" "),_("ul",[_("li",[e._v("单节点")])]),e._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactChildFiber.js#L1616",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("reconcileSingleElement"),_("OutboundLink")],1)]),e._v(" "),_("p",[e._v("对于单节点的diff，只有更新操作，单节点的更新会调用"),_("code",[e._v("reconcileSingleElement")]),e._v("函数处理。单节点指"),_("code",[e._v("newChildren")]),e._v("为单一节点，但是"),_("code",[e._v("oldFiber")]),e._v("的数量不一定，如果"),_("code",[e._v("oldFiber")]),e._v("为空则新建"),_("code",[e._v("newFiber")]),e._v("节点，如果不为空则尝试从"),_("code",[e._v("oldFiber")]),e._v("中找到相同节点并再用匹配的"),_("code",[e._v("oldFiber")]),e._v("，"),_("code",[e._v("newChildren")]),e._v("中新节点的props来生成新的fiber节点，无法找到则新建。")]),e._v(" "),_("ul",[_("li",[e._v("多节点")])]),e._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactChildFiber.js#L1175",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("reconcileChildrenArray"),_("OutboundLink")],1)]),e._v(" "),_("p",[e._v("分成两次遍历：")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("第一轮遍历：从头开始遍历"),_("code",[e._v("newChildren")]),e._v("，逐个与"),_("code",[e._v("oldFiber")]),e._v("链中的节点进行比较，判断节点的"),_("code",[e._v("key")]),e._v("或者"),_("code",[e._v("tag")]),e._v("是否有变化。")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("没变则从"),_("code",[e._v("oldFiber")]),e._v("节点clone一个"),_("code",[e._v("props")]),e._v("被更新的fiber节点，新的"),_("code",[e._v("props")]),e._v("来自"),_("code",[e._v("newChildren")]),e._v("中的新节点，实现节点更新。")])]),e._v(" "),_("li",[_("p",[e._v("有变化说明不满足复用条件，立即中断遍历进入下边的遍历。")])]),e._v(" "),_("li",[_("p",[e._v("如果"),_("code",[e._v("newChildren")]),e._v("遍历完，则把剩下的"),_("code",[e._v("oldFiber")]),e._v("删掉。删除不仅仅是标记了"),_("code",[e._v("effectTag")]),e._v("为Deletion，还会将这个被删除的fiber节点添加到父级的"),_("code",[e._v("effectList")]),e._v("中。")])]),e._v(" "),_("li",[_("p",[e._v("如果"),_("code",[e._v("oldFiber")]),e._v("遍历完，则把"),_("code",[e._v("newChildren")]),e._v("中剩下的节点全部新建。新建fiber节点并以"),_("code",[e._v("sibling")]),e._v("（指向下一个兄弟节点）为指针连成fiber链。")])]),e._v(" "),_("li",[_("p",[e._v("如果"),_("code",[e._v("oldFiber")]),e._v("和"),_("code",[e._v("newChildren")]),e._v("都没有遍历完，则进行第二次遍历，第一轮遍历完会得到一个最新固定节点的位置"),_("code",[e._v("lastPlacedIndex")]),e._v("（之前的节点都是已经处理完成的）。")])])])]),e._v(" "),_("li",[_("p",[e._v("第二轮遍历，把剩下的"),_("code",[e._v("oldFiber")]),e._v("放到映射"),_("code",[e._v("existingChildren")]),e._v("里（"),_("code",[e._v("key")]),e._v("值为键，值为fiber节点）。")]),e._v(" "),_("ul",[_("li",[e._v("遍历剩余的"),_("code",[e._v("newChildren")]),e._v("，从"),_("code",[e._v("existingChildren")]),e._v("里查找，如果找到了就移动（并且删除"),_("code",[e._v("existingChildren")]),e._v("对应的旧节点），没有找到则新建。")])]),e._v(" "),_("p",[e._v("移动的逻辑是："),_("code",[e._v("newChildren")]),e._v("中剩余的节点，都是不确定要不要移动的，遍历它们，检查节点在"),_("code",[e._v("oldFiber")]),e._v("链中的位置（旧fiber节点索引："),_("code",[e._v("newFiber.alternate.index")]),e._v("），遍历到的节点有它在"),_("code",[e._v("newChildren")]),e._v("中的位置（新位置）：")]),e._v(" "),_("ul",[_("li",[e._v("如果旧位置在"),_("code",[e._v("lastPlacedIndex")]),e._v("的右边，说明这个节点位置不变。原因是旧位置在"),_("code",[e._v("lastPlacedIndex")]),e._v("的右边，而新节点的位置也在它的右边，所以它的位置没变化。因为位置不变，所以它成了固定节点，把"),_("code",[e._v("lastPlacedIndex")]),e._v("更新成新位置。")]),e._v(" "),_("li",[e._v("如果旧位置在"),_("code",[e._v("lastPlacedIndex")]),e._v("的左边，当前这个节点的位置要往右挪。原因是旧位置在"),_("code",[e._v("lastPlacedIndex")]),e._v("的左边，新位置却在"),_("code",[e._v("lastPlacedIndex")]),e._v("的右边，所以它要往右挪，但它不是固定节点。此时无需更新"),_("code",[e._v("lastPlacedIndex")]),e._v("。")])]),e._v(" "),_("p",[e._v("第二轮遍历完了之后，把剩余的"),_("code",[e._v("oldFiber")]),e._v("删掉。")])])]),e._v(" "),_("p",[e._v("参考：")]),e._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/oZKowf4YLsVi67z777VKmA",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("面试官：了解过vue中的diff算法吗？说说看"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.cn/post/6919302952486174733?searchId=2025022809560497B2FBEEB6E6F576B282",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("深入理解React Diff算法"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=n.exports}}]);