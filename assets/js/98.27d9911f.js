(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{636:function(_,v,t){"use strict";t.r(v);var l=t(6),i=Object(l.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("p",[_._v("参考文章："),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/8Ecmy1KKJizEMqWtLC1-Cw",target:"_blank",rel:"nofollow noopener noreferrer"}},[_._v("面试官：说说什么是进程？什么是线程？区别？"),t("OutboundLink")],1)]),_._v(" "),t("h3",{attrs:{id:"进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[_._v("#")]),_._v(" 进程")]),_._v(" "),t("p",[_._v("操作系统中最核心的概念就是进程，进程是对正在运行中的程序的一个抽象，是系统进行资源分配和调度的基本单位，拥有代码和打开的文件资源、数据资源、独立的内存空间。操作系统的其他所有内容都是围绕着进程展开的，负责执行这些任务的是CPU")]),_._v(" "),t("p",[_._v("进程是一种抽象的概念，从来没有统一的标准定义看，一般由程序、数据集合和进程控制块三部分组成：")]),_._v(" "),t("ul",[t("li",[_._v("程序用于描述进程要完成的功能，是控制进程执行的指令集")]),_._v(" "),t("li",[_._v("数据集合是程序在执行时所需要的数据和工作区")]),_._v(" "),t("li",[_._v("程序控制块，包含进程的描述信息和控制信息，是进程存在的唯一标志")])]),_._v(" "),t("h3",{attrs:{id:"线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[_._v("#")]),_._v(" 线程")]),_._v(" "),t("p",[_._v("「线程」（Thread）是操作系统能够进行「运算调度」的最小单位，其是进程中的一个执行任务（控制单元），负责当前进程中程序的执行。一个进程至少有一个线程，一个进程可以运行多个线程，这些线程共享同一块内存，线程之间可以共享对象、资源，如果有冲突或需要协同，还可以随时沟通以解决冲突或保持同步。")]),_._v(" "),t("p",[_._v("但实际上，并不是线程越多，进程的工作效率越高，这是因为在一个进程内，不管你创建了多少线程，它们总是被限定在一颗CPU内，或者多核CPU的一个核内。这意味着，多线程在宏观上是并行的，在微观上则是分时切换串行的，多线程编程无法充分发挥多核计算资源的优势。这导致使用多线程做任务并行处理时，线程数量超过一定数值后，线程越多速度反倒越慢的原因。")]),_._v(" "),t("h3",{attrs:{id:"协程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协程"}},[_._v("#")]),_._v(" 协程")]),_._v(" "),t("p",[_._v("协程是一种比线程更加轻量级的存在，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。协程不是被操作系统内核所管理的，而是完全由程序所控制，也就是在用户态执行。这样带来的好处是性能大幅度的提升，因为不会像线程切换那样消耗资源。")]),_._v(" "),t("p",[_._v("区别")]),_._v(" "),t("ul",[t("li",[_._v("「本质区别」：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。")]),_._v(" "),t("li",[_._v("「资源开销」：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程基本上不拥有系统资源，只拥有一点在运行中必不可少的信息(如程序计数器、一组寄存器和栈)，线程之间切换的开销小")]),_._v(" "),t("li",[_._v("「所处环境」：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）")]),_._v(" "),t("li",[_._v("「内存分配」：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源")]),_._v(" "),t("li",[_._v("「包含关系」：一个进程可以包含多个线程，一个线程可以包含多个协程。没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。")]),_._v(" "),t("li",[_._v("「影响关系」：一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。")]),_._v(" "),t("li",[_._v("协程既不是进程也不是线程，协程仅仅是一个特殊的函数。")]),_._v(" "),t("li",[_._v("一个线程内的多个协程虽然可以切换，但是多个协程是串行执行的，只能在一个线程内运行，没法利用CPU多核能力。")]),_._v(" "),t("li",[_._v("协程与进程、线程一样，切换是存在上下文切换问题的。")])]),_._v(" "),t("p",[_._v("做个简单的比喻：进程=火车，线程=车厢")]),_._v(" "),t("ul",[t("li",[_._v("线程在进程下行进（单纯的车厢无法运行）")]),_._v(" "),t("li",[_._v("一个进程可以包含多个线程（一辆火车可以有多个车厢）")]),_._v(" "),t("li",[_._v("不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）")]),_._v(" "),t("li",[_._v("同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）")]),_._v(" "),t("li",[_._v("进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）")]),_._v(" "),t("li",[_._v("进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（大多数情况下是）（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）")]),_._v(" "),t("li",[_._v("进程可以拓展到多机，进程最适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）")]),_._v(" "),t("li",[_._v('进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－"互斥锁"')]),_._v(" "),t("li",[_._v("进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”")])])])}),[],!1,null,null,null);v.default=i.exports}}]);